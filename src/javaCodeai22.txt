import java.util.*;

public class KnightPathSolver {
    static String identifier = "knightPath";
    static char startSymbol;
    static List<String> board = new ArrayList<>(), tempBoard, finalBoard;

    static boolean isCompleted;
    static Set<String> visitedStates = new HashSet<>();
    static List<Pair<Character, String>> currentPath = new ArrayList<>(), optimalPath;

    static boolean isValidPosition(int x, int y) {
        return (x >= 0 && x < 8 && y >= 0 && y < 8);
    }

    static Pair<Integer, Integer> findPosition(List<String> board, char c) {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                if (board.get(i).charAt(j) == c) {
                    return new Pair<>(i, j);
                }
            }
        }
        return new Pair<>(-1, -1);
    }

    static boolean isValidKnightMove(int x1, int y1, int x2, int y2) {
        int dx = Math.abs(x1 - x2);
        int dy = Math.abs(y1 - y2);
        return (dx == 2 && dy == 1) || (dx == 1 && dy == 2);
    }

    static void displayResults() {
        System.out.println("Total explored states: " + visitedStates.size() + "\n");
        System.out.println("Final board configuration:");
        for (String row : finalBoard) {
            System.out.println(row);
        }
        for (Pair<Character, String> step : optimalPath) {
            System.out.println(step.getKey() + " " + step.getValue());
        }
    }

    static boolean isGoalState(List<String> board) {
        char symbol = startSymbol;
        Set<Character> seenSymbols = new HashSet<>();
        int counter = 0;

        for (int step = 0; step <= 7; step++) {
            seenSymbols.add(symbol);
            Pair<Integer, Integer> pos = findPosition(board, symbol);
            boolean foundMove = false;
            for (int i = -2; i <= 2 && !foundMove; i++) {
                for (int j = -2; j <= 2 && !foundMove; j++) {
                    if (Math.abs(i) + Math.abs(j) != 3) continue;
                    if (isValidPosition(pos.getKey() + i, pos.getValue() + j) &&
                            board.get(pos.getKey() + i).charAt(pos.getValue() + j) != '*' &&
                            !seenSymbols.contains(board.get(pos.getKey() + i).charAt(pos.getValue() + j)) &&
                            isValidKnightMove(pos.getKey(), pos.getValue(), pos.getKey() + i, pos.getValue() + j)) {
                        symbol = board.get(pos.getKey() + i).charAt(pos.getValue() + j);
                        seenSymbols.add(symbol);
                        counter++;
                        foundMove = true;
                    }
                }
            }
        }
        if (seenSymbols.size() == 6) {
            finalBoard = new ArrayList<>(board);
            optimalPath = new ArrayList<>(currentPath);
            return true;
        }
        return false;
    }

    static void depthFirstSearch() {
        tempBoard = new ArrayList<>(board);
        isCompleted = false;
        visitedStates.clear();
        currentPath.clear();

        String boardString = String.join("", tempBoard);
        if (visitedStates.contains(boardString) || isCompleted || currentPath.size() >= 20)
            return;

        visitedStates.add(boardString);

        for (char symbol : identifier.toCharArray()) {
            for (int[] move : new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}}) {
                Pair<Integer, Integer> pos = findPosition(tempBoard, symbol);
                int newX = pos.getKey() + move[0], newY = pos.getValue() + move[1];
                if (isValidPosition(newX, newY) && tempBoard.get(newX).charAt(newY) == '*') {
                    currentPath.add(new Pair<>(symbol, move[0] == 1 ? "up" : move[0] == -1 ? "down" : move[1] == 1 ? "right" : "left"));
                    Collections.swap(tempBoard, pos.getKey(), newX);

                    if (isGoalState(tempBoard)) {
                        isCompleted = true;
                    }

                    depthFirstSearch();

                    currentPath.remove(currentPath.size() - 1);
                    Collections.swap(tempBoard, pos.getKey(), newX);
                }
            }
        }
    }

    static void breadthFirstSearch() {
        static void breadthFirstSearch() {
        Queue<Pair<String, List<Pair<Character, String>>>> queue = new LinkedList<>();
        queue.add(new Pair<>(String.join("", board), new ArrayList<>()));

        while (!queue.isEmpty() && !isCompleted) {
            Pair<String, List<Pair<Character, String>>> current = queue.poll();
            String s = current.getKey();
            List<Pair<Character, String>> path = current.getValue();

            List<String> temp = stringToBoard(s);

            if (visitedStates.contains(s))
                continue;

            visitedStates.add(s);

            for (char symbol : identifier.toCharArray()) {
                for (int[] move : new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}}) {
                    Pair<Integer, Integer> pos = findPosition(temp, symbol);
                    int newX = pos.getKey() + move[0], newY = pos.getValue() + move[1];
                    if (isValidPosition(newX, newY) && temp.get(newX).charAt(newY) == '*') {
                        List<Pair<Character, String>> newPath = new ArrayList<>(path);
                        newPath.add(new Pair<>(symbol, move[0] == 1 ? "up" : move[0] == -1 ? "down" : move[1] == 1 ? "right" : "left"));
                        Collections.swap(temp, pos.getKey(), newX);

                        queue.add(new Pair<>(String.join("", temp), newPath));

                        if (isGoalState(temp)) {
                            finalBoard = new ArrayList<>(temp);
                            optimalPath = new ArrayList<>(newPath);
                            isCompleted = true;
                        }

                        Collections.swap(temp, pos.getKey(), newX);
                    }
                }
            }
        }
    }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        board = Arrays.asList(
                "********",
                "*a******",
                "**b*c***",
                "********",
                "*x******",
                "****t***",
                "*******z",
                "********"
        );
        startSymbol = scanner.next().charAt(0);

        depthFirstSearch();
        displayResults();

        breadthFirstSearch();
        displayResults();
    }

    static class Pair<K, V> {
        private final K key;
        private final V value;

        public Pair(K key, V value) {
            this.key = key;
            this.value = value;
        }

        public K getKey() { return key; }
        public V getValue() { return value; }
    }
}
